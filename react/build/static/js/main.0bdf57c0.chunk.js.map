{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PLACES","name","zip","WeatherDisplay","state","weatherData","URL","this","props","console","log","fetch","then","res","json","setState","weatherD","className","weather","iconUrl","icon","main","src","alt","description","temp","temp_max","temp_min","wind","speed","Component","App","activePlace","map","place","index","key","onClick","Boolean","window","location","hostname","match","root","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kNAGMA,EAAS,CACb,CAAEC,KAAM,WAAYC,IAAK,WACzB,CAAED,KAAM,YAAaC,IAAK,UAC1B,CAAED,KAAM,WAAYC,IAAK,WACzB,CAAED,KAAM,aAAcC,IAAK,WAC3B,CAAED,KAAM,WAAYC,IAAK,WACzB,CAAED,KAAM,SAAUC,IAAK,WACvB,CAAED,KAAM,aAAWC,IAAK,YAGpBC,E,YACJ,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,YAAa,MAHH,E,iFAMO,IAAD,OAEZC,EAAM,qDADAC,KAAKC,MAAMN,IACkD,iEACzEO,QAAQC,IAAIJ,GACZG,QAAQC,MACRC,MAAML,GACHM,KAAM,SAAAC,GAAG,OAAIA,EAAIC,SACfF,KAAK,SAAAE,GACF,EAAKC,SAAS,CAAEV,YAAaS,Q,+BAIrC,IAAME,EAAWT,KAAKH,MAAMC,YAC5B,IAAKW,EACH,OAAO,yBAAKC,UAAU,iBAAf,cAIT,IAAMC,EAAUF,EAASE,QAAQ,GAC3BC,EAAU,mCAAqCD,EAAQE,KAAO,OACpE,OACE,yBAAKH,UAAU,iBACb,4BACGC,EAAQG,KADX,OACqBL,EAASf,KAC5B,yBAAKqB,IAAKH,EAASI,IAAKP,EAASQ,eAEjC,uCAAaR,EAASK,KAAKI,KAA3B,SACA,oCAAUT,EAASK,KAAKK,SAAxB,SACA,mCAASV,EAASK,KAAKM,SAAvB,SACA,0CAAgBX,EAASY,KAAKC,MAA9B,e,GApCmBC,aA2EdC,E,YAhCb,aAAe,IAAD,8BACZ,+CACK3B,MAAQ,CACX4B,YAAa,GAHH,E,sEAMJ,IAAD,OACDA,EAAczB,KAAKH,MAAM4B,YAC/B,OACE,yBAAKf,UAAU,aACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,gBACZjB,EAAOiC,IAAI,SAACC,EAAOC,GAAR,OACV,4BACEC,IAAKD,EACHlB,UAAU,YACRoB,QAAS,WACX,EAAKtB,SAAS,CAAEiB,YAAaG,MAI9BD,EAAMjC,SAIf,kBAAC,EAAD,CAAgBmC,IAAKJ,EAAa9B,IAAKF,EAAOgC,GAAa9B,Y,GA1BjD4B,aC3CEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAIC,EAAOC,SAASC,eAAe,QAEnCC,IAASC,OAAO,kBAAC,EAAD,MAASJ,GDuHnB,kBAAmBK,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC,gB","file":"static/js/main.0bdf57c0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n// import \"./App.css\";\n\nconst PLACES = [\n  { name: \"Tashkent\", zip: \"1512569\"},\n  { name: \"Holubynka\", zip: \"708546\" },\n  { name: \"San Jose\", zip: \"1689498\" },\n  { name: \"Santa Cruz\", zip: \"5393068\" },\n  { name: \"Honolulu\", zip: \"5856194\" },\n  { name: \"London\", zip: \"2643743\"},\n  { name: \"M체nchen\", zip: \"3220838\"},\n];\n\nclass WeatherDisplay extends Component {\n  constructor() {\n    super();\n    this.state = {\n      weatherData: null\n    };\n  }\n  componentDidMount() {\n    const zip = this.props.zip;                                                       \n    const URL = \"http://api.openweathermap.org/data/2.5/weather?id=\" + zip + \"&lang=ru&appid=e4ef437a34170a4cb1387ee0bd5bce97&units=imperial\";\n    console.log(URL)\n    console.log()\n    fetch(URL)\n      .then( res => res.json())\n        .then(json => {\n            this.setState({ weatherData: json });\n        });\n  }\n  render() {\n    const weatherD = this.state.weatherData;\n    if (!weatherD) { \n      return <div className=\"loading_block\">Loading...</div>; \n      \n      }\n    \n    const weather = weatherD.weather[0];\n    const iconUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\n    return (\n      <div className=\"weather_block\">\n        <h1>\n          {weather.main} in {weatherD.name}\n          <img src={iconUrl} alt={weatherD.description} />\n        </h1>\n          <p>Current: {weatherD.main.temp}째F</p>\n          <p>High: {weatherD.main.temp_max}째F</p>\n          <p>Low: {weatherD.main.temp_min}째F</p>\n          <p>Wind Speed: {weatherD.wind.speed} mi/hr</p>\n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      activePlace: 0\n    };\n  }\n  render() {\n    const activePlace = this.state.activePlace;\n    return (\n      <div className=\"container\">\n        <div className=\"wrapper\">\n          <div className=\"Button-group\">\n            {PLACES.map((place, index) => (\n              <button\n                key={index}\n                  className='btn btn-3'\n                    onClick={() => {\n                  this.setState({ activePlace: index });\n                }}\n              >\n                \n                {place.name}\n              </button>\n            ))}\n          </div>\n        <WeatherDisplay key={activePlace} zip={PLACES[activePlace].zip} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\n// import \"bootstrap/dist/css/bootstrap.css\";\nimport * as serviceWorker from './serviceWorker';\n\n\nlet root = document.getElementById('root');\n\nReactDOM.render(<App />, root);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}